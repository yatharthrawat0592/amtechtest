version: '2.3'

services:
  ccs-db:
    container_name: css_database
    image: mysql:5.7.34
    command:
      - "--default-authentication-plugin=mysql_native_password"
    restart: always
    ports:
      - 3307:3306
    environment:
      MYSQL_USER: ccs-amtech
      MYSQL_ROOT_PASSWORD: root     
      MYSQL_PASSWORD: ccs_amtech@2023
      MYSQL_DATABASE: ccs
    volumes:
      - db-data:/var/lib/mysql
      - ./ccs-backend/mysql-dump/ccs_tblccssystem.sql:/docker-entrypoint-initdb.d/ccs_tblccssystem.sql
      - ./ccs-backend/mysql-dump/ccs_tblccsunit.sql:/docker-entrypoint-initdb.d/ccs_tblccsunit.sql
      - ./ccs-backend/mysql-dump/ccs_tblccsunitdata.sql:/docker-entrypoint-initdb.d/ccs_tblccsunitdata.sql
      - ./ccs-backend/mysql-dump/ccs_tbleuniterror.sql:/docker-entrypoint-initdb.d/ccs_tbleuniterror.sql
      - ./ccs-backend/mysql-dump/ccs_tblsystemunitassociation.sql:/docker-entrypoint-initdb.d/ccs_tblsystemunitassociation.sql
      - ./ccs-backend/mysql-dump/ccs_tblCcsusersession.sql:/docker-entrypoint-initdb.d/ccs_tblCcsusersession.sql
      - ./ccs-backend/mysql-dump/ccs_dbfrontendlog.sql:/docker-entrypoint-initdb.d/ccs_dbfrontendlog.sql
      - ./ccs-backend/mysql-dump/ccs_tutorials.sql:/docker-entrypoint-initdb.d/ccs_tutorials.sql
      - ./ccs-backend/mysql-dump/ccs_userroles.sql:/docker-entrypoint-initdb.d/ccs_userroles.sql
      - ./ccs-backend/mysql-dump/ccs_tblerrorassociation.sql:/docker-entrypoint-initdb.d/ccs_tblerrorassociation.sql
      - ./ccs-backend/mysql-dump/triggers.sql:/docker-entrypoint-initdb.d/triggers.sql
      - ./ccs-backend/mysql-dump/ccs_tblCcsInfoStage.sql:/docker-entrypoint-initdb.d/ccs_tblCcsInfoStage.sql
      - ./ccs-backend/mysql-dump/ccs_tblCcsFirmware.sql:/docker-entrypoint-initdb.d/ccs_tblCcsFirmware.sql
      - ./ccs-backend/mysql-dump/ccs_userinfo.sql:/docker-entrypoint-initdb.d/ccs_userinfo.sql
    tty: true
    networks:
            default:
                ipv4_address: 172.20.0.24
  server:
    build:
      context: ./ccs-backend
      dockerfile: Dockerfile
    image: ccs-backend
    container_name: amtech-ccs-node-server
    command: /usr/src/app/node_modules/.bin/nodemon index.js
    # network_mode: "host"
    volumes:
      - ./ccs-backend/:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - "8800:8800"
    env_file: ./ccs-backend/.env
    environment:
      - NODE_ENV=development
      - DB_HOST=css_database
    depends_on:
      - ccs-db
  client:
    build:
      context: ./ccsDash-frontend
      dockerfile: Dockerfile
    image: ccs-frontend
    container_name: amtech-ccs-client
    command: npm start
    volumes:
      - ./ccsDash-frontend/:/app
      - /app/node_modules
    environment:
      CHOKIDAR_USEPOLLING: "true"
    ports:
      - "3001:3001"
    depends_on:
      - server
  grafana:
    image: grafana/grafana:latest
    container_name: amtech-ccs-grafana
    ports:
      - 3000:3000/tcp
    volumes:
      - ./provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - grafana-data:/var/lib/grafana
    environment:
      - TERM=linux
      - GF_LOG_LEVEL=debug
      - GF_DATAPROXY_LOGGING=true
      - GF_DEFAULT_APP_MODE=development
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_DATABASE_TYPE=mysql
      - GF_DATABASE_HOST=ccs-db
      - GF_DATABASE_NAME=ccs
      - GF_DATABASE_USER=ccs-amtech
      - GF_DATABASE_PASSWORD=ccs_amtech@2023
      - GF_DATABASE_SSL_MODE=disable
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_NAME=Main Org.
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_OAUTH_ALLOW_INSECURE_EMAIL_LOOKUP=true
      - GF_AUTH_GENERIC_OAUTH_AUTO_LOGIN=true
      - GF_AUTH_DISABLE_SIGNOUT_MENU=true
  ws-server:
    container_name: amtech-ws-server
    restart: on-failure
    image: ws-server
    # network_mode: "host"
    build:
      context: ./ccsWS/webSocketServer
      dockerfile: Dockerfile
    volumes:
      - ./ccsWS/webSocketServer:/usr/src/ws
      -  /usr/src/ws/node_modules
    ports: 
      - "4888:4888"
    depends_on:
      - server
    networks:
      - default
  nginx:
    restart: always
    build:
      context: ./nginx
    ports:                                                                                                                                                                                          
      - "80:80"   
      - "443:443"
    depends_on:
      - client
      
networks:
  default:
    name: app-networks
       driver: bridge
            config:
                - subnet: "172.20.0.0/24
                  gateway: "172.20.0.1

volumes:
  data-volumes:
  # node_modules:
  # grafana-storage:
  #   external: true
  db-data:
  grafana-data:
  web-root:
    driver: local
