name: Test
on:
  push:
    branches: [ "main" ]
jobs:
  notify:
    runs-on: self-hosted

    steps:
      - id: permission
          # set permission to user..
        run: sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work/amtechtest
        
      - uses: actions/checkout@v3
       
      - name: update vm
           # update vrtual machine 
        run: sudo apt-get update  
      
      - name: install docker
            # Install Docker
        run: sudo apt install -y docker-compose 

      - name: docker stop
        # stop Docker containers
        run: sudo docker-compose down
        
      
      - id: image-css-frontend 
      # remove CCS-forntend image
        run: |
              echo "images=$(sudo docker images  --filter=reference='ccs-frontend' --format  "{{.Repository}}")" >> "$GITHUB_OUTPUT"
              
      - name: image remove css-forntend
        env:
               images: ${{ steps.image-css-frontend.outputs.images }}
        run: |
              if [[ "$images" == "ccs-frontend" ]]; then
                   echo "Deleting ccs-frontend ..."
                     sudo docker image rm ccs-frontend
              else
                   echo "Image ccs-frontend is not available locally."
              fi
     
      - id: image-css-backend 
      # remove CCS-backend image......
        run: |
              echo "images=$(sudo docker images  --filter=reference='ccs-backend' --format  "{{.Repository}}")" >> "$GITHUB_OUTPUT"
         
      - name: image remove css-backend
        env:
               images: ${{ steps.image-css-backend.outputs.images }}
        run: |
                if [[ "$images" == "ccs-backend" ]]; then
                   echo "Deleting ccs-backend ..."
                     sudo docker image rm ccs-backend
                else
                   echo "Image ccs-backend is not available locally."
                fi    
       
      - id: image-amtechtest_nginx
      # remove amtech_nginx image
        run: |
              echo "images=$(sudo docker images  --filter=reference='amtechtest_nginx' --format  "{{.Repository}}")" >> "$GITHUB_OUTPUT"
         
      - name: image remove amtechtest_nginx
        env:
               images: ${{ steps.image-amtechtest_nginx.outputs.images }}
        run: |
               if [[ "$images" == "amtechtest_nginx" ]]; then
                   echo "Deleting amtechtest_nginx ..."
                     sudo docker image rm amtechtest_nginx
                else
                      echo "Image amtechtest_nginx is not available locally."
                fi
                     
 
      - id: image-ws-server
      # remove ws-server image
        run: |
              echo "images=$(sudo docker images  --filter=reference='ws-server' --format  "{{.Repository}}")" >> "$GITHUB_OUTPUT"
         
      - name: image remove ws-server
        env:
               images: ${{ steps.image-ws-server.outputs.images }}
        run: |
                if [[ "$images" == "ws-server" ]]; then
                   echo "Deleting ws-server ..."
                     sudo docker image rm ws-server
                else
                   echo "Image ws-server is not available locally."
                fi

               
      - id: image-nginx
      # remove nginx image
        run: |
              echo "images=$(sudo docker images  --filter=reference='nginx' --format  "{{.Repository}}")" >> "$GITHUB_OUTPUT"
         
      - name: image remove nginx
        env:
               images: ${{ steps.image-nginx.outputs.images }}
        run: |       
                if [[ "$images" == "nginx" ]]; then
                   echo "Deleting nginx ..."
                     sudo docker image rm nginx
                else
                    echo "Image nginx is not available locally."
                fi
              
      - id: image-grafana
       # remove grafana image
        run: |
              echo "images=$(sudo docker images  --filter=reference='grafana/grafana' --format  "{{.Repository}}")" >> "$GITHUB_OUTPUT"
         
      - name: image remove grafana
        env:
               images: ${{ steps.image-image-grafana.outputs.images }}
        run: |      
                if [[ "$images" == "grafana/grafana" ]]; then
                   echo "Deleting grafana ..."
                     sudo docker image rm grafana/grafana
                else
                    echo "Image grafana is not available locally."
                fi
      - name: set timeout
        # set timeout to 120 ms
        run:        
              export DOCKER_CLIENT_TIMEOUT=120 && export COMPOSE_HTTP_TIMEOUT=120
                
      - name: docker start.
        # start and up all the containers
        run: sudo docker-compose up -d


